package onix

import (
	"encoding/xml"
	"fmt"
	"strings"
)

{{#.}}

{{#spaceSeparatable}}
// {{xmlReferenceName}} {{description}}
{{#hasElements}}
type {{xmlReferenceName}} struct {
	Body []string `xml:",innerxml"`
{{#elements}}
	{{xmlReferenceName}} {{typeName}} `xml:"{{shortname}},attr,omitempty" json:",omitempty"`
{{/elements}}
}
{{/hasElements}}
{{^hasElements}}
type {{xmlReferenceName}} []string
{{/hasElements}}
{{/spaceSeparatable}}
{{^spaceSeparatable}}
// {{xmlReferenceName}} {{description}}
{{#hasElements}}
type {{xmlReferenceName}} struct {
	Body string `xml:",innerxml"`
{{#elements}}
	{{xmlReferenceName}} {{typeName}} `xml:"{{shortname}},attr,omitempty" json:",omitempty"`
{{/elements}}
}
{{/hasElements}}
{{^hasElements}}
type {{xmlReferenceName}} string
{{/hasElements}}
{{/spaceSeparatable}}

// UnmarshalXML is unmarshaler from code to human readable description as of defined at codelists.
func (c *{{xmlReferenceName}}) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	d.DecodeElement(&v, &start)
{{#hasElements}}
	for _, attr := range start.Attr {
{{#elements}}
		if attr.Name.Local == "{{shortname}}" {
			c.{{xmlReferenceName}} = {{typeName}}(attr.Value)
		}
{{/elements}}
	}
{{/hasElements}}
{{#spaceSeparatable}}
	codes := strings.Split(v, " ")
	tmpeCodes := []string{}
	for _, code := range codes {
		switch code {
		{{#codes}}

		// {{&notes}}
		case "{{value}}":
			tmpeCodes = append(tmpeCodes, `{{description}}`)
		{{/codes}}
		default:
			return fmt.Errorf("undefined code for {{xmlReferenceName}} has been passed, got [%s]", v)
		}
	}
{{#hasElements}}
	c.Body = tmpeCodes
{{/hasElements}}
{{^hasElements}}
	*c = tmpeCodes
{{/hasElements}}
{{/spaceSeparatable}}
{{^spaceSeparatable}}
	switch v {
  {{#codes}}

  // {{&notes}}
  case "{{value}}":
{{#hasElements}}
		c.Body = `{{description}}`
{{/hasElements}}
{{^hasElements}}
		*c = `{{description}}`
{{/hasElements}}
  {{/codes}}
	default:
		return fmt.Errorf("undefined code for {{xmlReferenceName}} has been passed, got [%s]", v)
	}
{{/spaceSeparatable}}
	return nil
}
{{/.}}
